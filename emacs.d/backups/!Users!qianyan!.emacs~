(load "package")

(package-initialize)

(add-to-list 'package-archives
             '("marmalade" . "https://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)

(setq package-archive-enable-alist '(("melpa" deft magit)))

(defvar my-packages '(better-defaults paredit idle-highlight-mode ido-ubiquitous
                                      find-file-in-project magit smex scpaste evil))
(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
 
(set-variable (quote scheme-program-name) "petite")
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

(autoload 'scheme-mode "cmuscheme" "Major mode for Scheme." t)
(autoload 'run-scheme "cmuscheme" "Switch to interactive Scheme buffer." t)
(setq auto-mode-alist (cons '("\\.ss" . scheme-mode) auto-mode-alist))
(custom-set-variables '(scheme-program-name "petite"))

;; paredit mode
(require 'paredit)
(autoload 'enable-paredit-mode "paredit")
(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
(add-hook 'scheme-mode-hook           #'enable-paredit-mode) 


;; evil mode
;;(require 'evil)
;;(evil-mode 1)
;;
;;;; Remap org-mode meta keys for convenience
;;(mapcar (lambda (state)
;;          (evil-declare-key state org-mode-map
;;                            (kbd "M-l") 'org-metaright
;;                            (kbd "M-h") 'org-metaleft
;;                            (kbd "M-k") 'org-metaup
;;                            (kbd "M-j") 'org-metadown
;;                            (kbd "M-L") 'org-shiftmetaright
;;                            (kbd "M-H") 'org-shiftmetaleft
;;                            (kbd "M-K") 'org-shiftmetaup
;;                            (kbd "M-J") 'org-shiftmetadown))
;;        '(normal insert))
;;
;;(define-key evil-insert-state-map (kbd "C-]") 'evil-change-to-previous-state) 
;;(define-key evil-normal-state-map (kbd "C-]") 'evil-force-normal-state) 
;;(define-key evil-replace-state-map (kbd "C-]") 'evil-normal-state) 
;;(define-key evil-visual-state-map (kbd "C-]") 'evil-exit-visual-state) 
